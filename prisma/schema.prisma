// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seller {
  id             String           @id @default(uuid())
  shopName       String           @unique
  surname        String
  name           String
  patronyc       String?
  INN            String           @unique
  phone          String           @unique
  email          String           @unique
  password       String
  logo           String?
  sellerCategory SellerCategory[]
  products       Product[]
}

model SellerCategory {
  id     String   @id @default(uuid())
  name   String   @unique
  img    String
  seller Seller[]
}

model Client {
  id       String  @id @default(uuid())
  name     String
  surname  String
  email    String  @unique
  phone    String  @unique
  password String
  cart     Cart?
  order    Order[]
}

model Product {
  id              String            @id @default(uuid())
  name            String
  description     String
  price           Float
  img             String
  isAvailable     Boolean           @default(true)
  isPopular       Boolean           @default(false)
  isDeleted       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  productCategory ProductCategory[]
  seller          Seller?           @relation(fields: [sellerId], references: [id])
  sellerId        String?
  cartProduct     CartProduct[]
  orderProduct    OrderProduct[]
}

model ProductCategory {
  id      String    @id @default(uuid())
  name    String    @unique
  img     String
  product Product[]
}

model Cart {
  id          String        @id @default(uuid())
  sum         Float
  client      Client        @relation(fields: [clientId], references: [id])
  clientId    String        @unique
  cartProduct CartProduct[]
}

model CartProduct {
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  count     Int     @default(1)

  @@id([cartId, productId])
}

model Order {
  id           String         @id @default(uuid())
  date         DateTime
  sum          Float
  orderProduct OrderProduct[]
  client       Client?        @relation(fields: [clientId], references: [id])
  clientId     String?
}

model OrderProduct {
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  count     Int

  @@id([orderId, productId])
}
